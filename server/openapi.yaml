openapi: 3.0.0
info:
  version: "1"
  title: chefswap
  description: The API for chefswap
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MATTHEWS13542/chefswap/1
  - url: http://localhost:3001
    description: development
paths:
  /api/v1/accounts:
    get:
      summary: Read the profile (public) data of all accounts.
      parameters:
        - in: query
          name: username
          description: The username of an account.
          schema:
            type: string
            minLength: 3
            maxLength: 80
            pattern: '[^!*''();:@&=+$,/?%#[\]]{3,80}' #can't conatain any url reserved characters
        - in: query
          name: includeDistanceFrom
          description: The distance from the specified latitude+longitude to centre of each account's circle will be added to response body. Both latitude and longitude must be specified.
          explode: true
          style: deepObject
          schema: #if includeDistance exists, it must have both latitude and longitude
            oneOf:
              - type: object
                additionalProperties: false
                required:
                  - latitude
                  - longitude
                properties:
                  latitude:
                    $ref: "#/components/schemas/Latitude"
                  longitude:
                    $ref: "#/components/schemas/Longitude"
              - type: object #workaround to have optional param with required fields
                nullable: true
                additionalProperties: false
        - in: query
          name: minRating
          description: All accounts in response will have a rating greater than or equal to minRating.
          schema:
            type: number
            format: float
            minimum: 1
            maximum: 5
        - in: query
          name: maxRating
          description: All accounts in response will have a rating less than or equal to maxRating.
          schema:
            type: number
            format: float
            minimum: 1
            maximum: 5
        - in: query
          name: cuisinePreference
          description: All accounts in response will have AT LEAST 1 of the specified cuisine preferences.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CuisineType"
        - in: query
          name: cuisineSpeciality
          description: All accounts in response will have AT LEAST 1 of the specified cuisine specialities.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CuisineType"
        - in: query
          name: maxDistance
          description: Only valid if includeDistanceFrom is specified. All accounts in response will be at most maxDistance from the position specified in includeDistanceFrom.
          schema:
            type: integer
            format: int32
            minimum: 50
            maximum: 2000000000
        - in: query
          name: orderBy
          description: Specifies the first field to be used for ordering results. Second field (or only if this param is not specified) is always accountUid. Ordering by distance is only valid if includeDistanceFrom is also specified.
          schema:
            type: string
            enum:
              - avgRatingAsc
              - avgRatingDesc
              - distanceAsc
              - distanceDesc
        - in: query
          name: key
          description: All accounts in response will be occur after an account that has the specified properties according to the ordering set by orderBy. If ordering by distance, key must include field "distance". If ordering by rating, key must include field "rating". In all cases, field accountUid may optionally be provided.
          explode: true
          style: deepObject
          schema:
            oneOf:
              - type: object #no ordering (just order by uuidAsc)
                additionalProperties: false
                properties:
                  accountUid:
                    type: string
                    format: uuid
                    default: 00000000-0000-0000-0000-000000000000
              - type: object #ordering by distance
                additionalProperties: false
                properties:
                  accountUid:
                    type: string
                    format: uuid
                    default: 00000000-0000-0000-0000-000000000000
                  distance:
                    oneOf:
                      - type: integer
                        format: int32
              - type: object #ordering by rating
                additionalProperties: false
                properties:
                  accountUid:
                    type: string
                    format: uuid
                    default: 00000000-0000-0000-0000-000000000000
                  avgRating:
                    $ref: "#/components/schemas/AvgRating"
        - in: query
          name: limit
          description: Response will include up to limit accounts.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 20
      responses:
        200:
          description: Array containing profile data of accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - profile
                  properties:
                    profile:
                      $ref: "#/components/schemas/AccountProfile"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        201:
          description: The account was successfully created. Response contains the created account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read an account. If signed in, response contains all account data. Otherwise, response only contains profile data.
      responses:
        200:
          description: The account corresponding to the provided uid. Includes only profile information unless authenticated with target account.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Account"
                  - required:
                      - profile
                    properties:
                      profile:
                        $ref: "#/components/schemas/AccountProfile"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/username:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the username of an account.
      responses:
        200:
          description: The username of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - username
                properties:
                  username:
                    $ref: "#/components/schemas/Username"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update the username of an account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  $ref: "#/components/schemas/Username"
      responses:
        200:
          description: The updated username of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - username
                properties:
                  username:
                    $ref: "#/components/schemas/Username"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/email:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the email of an account. Must be signed in with specified account.
      responses:
        200:
          description: The email of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    $ref: "#/components/schemas/Email"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update the email of an account. Must be signed in with specified account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  $ref: "#/components/schemas/Email"
      responses:
        200:
          description: The updated email of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    $ref: "#/components/schemas/Email"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/password:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    put:
      summary: Update the password of an account. Must be signed in with speficied account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        204:
          description: Password updated successfully.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/address:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read address of an account. Must be signed in with speficied account.
      responses:
        200:
          description: The address of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update the address of an account. Must be signed in with speficied account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        200:
          description: The updated address of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/bio:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read bio of an account.
      responses:
        200:
          description: The bio of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - bio
                properties:
                  bio:
                    $ref: "#/components/schemas/Bio"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update the bio of an account. Must be signed in with specified account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bio
              properties:
                bio:
                  $ref: "#/components/schemas/Bio"
      responses:
        200:
          description: The updated bio of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - bio
                properties:
                  bio:
                    $ref: "#/components/schemas/Bio"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/circle:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read circle of an account.
      responses:
        200:
          description: The circle of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Circle"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update the circle of an account. Circle will be randomly generated based on address and specified radius. Must be signed in with specified account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Circle"
      responses:
        200:
          description: The updated circle of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Circle"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/pfp:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the pfp of an account.
      responses:
        200:
          description: The link to the pfp of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - pfpLink
                properties:
                  pfpLink:
                    $ref: "#/components/schemas/ImageLink"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update the pfp of an account. Must be signed in with specified account.
      # not working for some reason
      # requestBody:
      #   required: true
      #   content:
      #     multipart/form-data:
      #       schema:
      #         type: object
      #         properties:
      #           file:
      #             type: string
      #             format: binary
      responses:
        200:
          description: The link to the updated pfp of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - pfpLink
                properties:
                  pfpLink:
                    $ref: "#/components/schemas/ImageLink"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/images:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the images of an account.
      responses:
        200:
          description: The images of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - images
                properties:
                  images:
                    type: array
                    items:
                      $ref: "#/components/schemas/Image"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add an image to an account. Sent in multipart/form-data in field named "image". Must be signed in with specified account.
      # not working for some reason
      # requestBody:
      #   required: true
      #   content:
      #     multipart/form-data:
      #       schema:
      #         type: object
      #         properties:
      #           file:
      #             type: string
      #             format: binary
      responses:
        201:
          description: The newly created image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/images/{imageUid}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
      - name: imageUid
        description: The uuid of the image
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Read an image from an account
      responses:
        200:
          description: The image with specified uid of the account corresponding to the provided accountUid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an image from account. Must be signed in with specified account.
      responses:
        204:
          description: Image deleted successfully.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/rating:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the rating of an account.
      responses:
        200:
          description: The rating of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - numRatings
                properties:
                  avgRating:
                    $ref: "#/components/schemas/AvgRating"
                  numRatings:
                    $ref: "#/components/schemas/NumRatings"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/cuisinePreferences:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the cuisine preferences of an account.
      responses:
        200:
          description: The cuisine preferences of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - cuisinePreferences
                properties:
                  cuisinePreferences:
                    type: array
                    items:
                      $ref: "#/components/schemas/CuisineType"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add a cuisine preference to an account. Must be signed in with specified account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cuisinePreference
              properties:
                cuisinePreference:
                  $ref: "#/components/schemas/CuisineType"
      responses:
        201:
          description: The added cuisine preference of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - cuisinePreference
                properties:
                  cuisinePreference:
                    $ref: "#/components/schemas/CuisineType"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/cuisinePreferences/{preference}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
      - in: path
        name: preference
        description: A cuisine preference of an account.
        required: true
        schema:
          $ref: "#/components/schemas/CuisineType"
    delete:
      summary: Deletes the cuisine perferece for the specified account. Must be signed in with specified account.
      responses:
        204:
          description: Successfully deleted preference.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/cuisineSpecialities:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Read the cuisine specialities of an account.
      responses:
        200:
          description: The cuisine specialities of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - cuisineSpecialities
                properties:
                  cuisineSpecialities:
                    type: array
                    items:
                      $ref: "#/components/schemas/CuisineType"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add a cuisine speciality to an account. Must be signed in with specified account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cuisineSpeciality
              properties:
                cuisineSpeciality:
                  $ref: "#/components/schemas/CuisineType"
      responses:
        201:
          description: The added cuisine speciality of the account corresponding to the provided uid.
          content:
            application/json:
              schema:
                type: object
                required:
                  - cuisineSpeciality
                properties:
                  cuisineSpeciality:
                    $ref: "#/components/schemas/CuisineType"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/accounts/{accountUid}/cuisineSpecialities/{speciality}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
      - in: path
        name: speciality
        description: A cuisine speciality of an account.
        required: true
        schema:
          $ref: "#/components/schemas/CuisineType"
    delete:
      summary: Deletes the cuisine perferece for the specified account. Must be signed in with specified account.
      responses:
        204:
          description: Successfully deleted speciality.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/swaps/{accountUid}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
    get:
      summary: Get all swaps an account is a part of.
      parameters:
        - in: query
          name: status
          description: The status of a swap (pending, ongoing, ended).
          schema:
            $ref: "#/components/schemas/SwapStatus"
      responses:
        200:
          description: The swaps of the account corresponding to the provided uid matching status set in optional query param status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Swap"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create new swap. Must be signed in with specified account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Swap"
      responses:
        201:
          description: The newly created swap.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Swap"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/swaps/{accountUid}/{swapperUid}/{matchNum}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
      - name: swapperUid
        description: The uuid of an the swapper's account.
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: matchNum
        description: Number that increments with the number of swaps between two specific accounts.
        in: path
        required: true
        schema:
          type: integer
          minimum: 0
    get:
      summary: Get the specific swap between the specified accounts with specified matchNum.
      responses:
        200:
          description: The matchNum'th swap betweeen specified accounts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Swap"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete the specific swap between the specified accounts with specified matchNum. Must be signed in with specified account.
      responses:
        204:
          description: Successfully deleted swap.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/swaps/{accountUid}/{swapperUid}/{matchNum}/{status}:
    parameters:
      - $ref: "#/components/parameters/AccountUid"
      - name: swapperUid
        description: The uuid of an the swapper's account
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: matchNum
        description: Number that increments with the number of swaps between two specific accounts.
        in: path
        required: true
        schema:
          type: integer
          minimum: 0
      - name: status
        description: The status of a swap (pending, ongoing, ended).
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/SwapStatus"
    put:
      summary: Change the status of a swap. Must be signed in with one of the specified accounts and status must correspond with future status.
      description: Can be set to ongoing if currently pending signed in as account that did no request. Can be set to ended currently ongoing and signed in with either account.
      responses:
        200:
          description: The new status of the swap.
          content:
            application/json:
              schema:
                type: object
                required:
                  - swapStatus
                properties:
                  swapStatus:
                    $ref: "#/components/schemas/SwapStatus"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /api/v1/session:
    get:
      summary: Get the current session details.
      responses:
        200:
          description: The current session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create a new session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: "#/components/schemas/Username"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        201:
          description: The newly created session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        401:
          description: Invalid username/password
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: End the current session.
      responses:
        204:
          description: Successfully ended session.
        404:
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    Image:
      type: object
      description: representation of image
      required:
        - imageUid
        - accountUid
        - imageLink
        - timestamp
      properties:
        imageUid:
          readOnly: true
          type: string
          format: uuid
        accountUid:
          readOnly: true
          type: string
          format: uuid
        imageLink:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/ImageLink"
        timestamp:
          readOnly: true
          type: string
          format: date-time
    ImageLink:
      type: string
      description: link to image in google cloud storage
      pattern: '^https:\/\/storage\.googleapis\.com\/.+$'
    CuisineType:
      type: string
      enum:
        - BBQ
        - Cajun
        - Chinese
        - Greek
        - Indi
        - Indian
        - Italian
        - Japanese
        - Korean
        - Mediterranean
        - Mexican
        - Pizza
        - Thai
        - Vietnamese
    AccountProfile:
      type: object
      description: profile data available without authentication
      required:
        - accountUid
        - username
        - bio
        - circle
        - numRatings
        - createTime
        - updateTime
        - images
        - cuisinePreferences
        - cuisineSpecialities
      properties:
        accountUid:
          readOnly: true
          type: string
          format: uuid
        username:
          $ref: "#/components/schemas/Username"
        bio:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Bio"
        circle:
          $ref: "#/components/schemas/Circle"
        pfpLink:
          $ref: "#/components/schemas/ImageLink"
        avgRating:
          $ref: "#/components/schemas/AvgRating"
        numRatings:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/NumRatings"
        createTime:
          readOnly: true
          type: string
          format: date-time
        updateTime:
          readOnly: true
          type: string
          format: date-time
        images:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/Image"
        cuisinePreferences:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/CuisineType"
        cuisineSpecialities:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/CuisineType"
    Account:
      type: object
      description: All data associated with an account.
      required:
        - profile
        - email
        - password
        - address
      properties:
        profile:
          $ref: "#/components/schemas/AccountProfile"
        email:
          $ref: "#/components/schemas/Email"
        password:
          writeOnly: true
          allOf:
            - $ref: "#/components/schemas/Password"
        address:
          $ref: "#/components/schemas/Address"
    Address:
      type: object
      required:
        - address1
        - city
        - province
        - postalCode
        - latitude
        - longitude
      properties:
        address1:
          type: string
          maxLength: 80
        address2:
          type: string
          maxLength: 80
        address3:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 35
        province:
          type: string
          enum:
            - Ontario
            - Quebec
            - British Columbia
            - Alberta
            - Manitoba
            - Saskatchewan
            - Nova Scotia
            - New Brusnwick
            - Newfoundland and Labrador
            - Prince Edward Island
            - Northwest Territories
            - Yukon
            - Nunavut
        postalCode:
          type: string
          pattern: '^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z]\d[ABCEGHJ-NPRSTV-Z]\d$'
        latitude:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Latitude"
        longitude:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Longitude"
    Circle:
      type: object
      required:
        - radius
        - latitude
        - longitude
      properties:
        radius:
          type: integer
          minimum: 50
          maximum: 3000
        latitude:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Latitude"
        longitude:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Longitude"
    Username:
      type: string
      minLength: 3
      maxLength: 80
      pattern: '[^!*''();:@&=+$,/?%#[\]]{3,80}' #can't conatain any url reserved characters
    Password:
      type: string
      minLength: 8
      maxLength: 50
      pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,50}$' #must contain lowercase, uppercase, number
    Latitude:
      type: number
      format: float
      maximum: 90
      minimum: -90
    Longitude:
      type: number
      format: float
      maximum: 180
      minimum: -180
    Email:
      type: string
      format: email
      maxLength: 80
    Bio:
      type: string
      maxLength: 500
    AvgRating:
      type: number
      minimum: 1
      maximum: 5
    NumRatings:
      type: integer
      minimum: 0
    Cookie:
      type: object
      required:
        - originalMaxAge
        - expires
        - secure
        - httpOnly
        - path
      properties:
        originalMaxAge:
          type: integer
          format: int64
        expires:
          type: string
          format: date-time
        secure:
          type: boolean
        httpOnly:
          type: boolean
        path:
          type: string
    SwapStatus:
      type: string
      enum:
        - pending
        - ongoing
        - ended
    Swap:
      type: object
      required:
        - requesterUid
        - requesteeUid
        - matchNum
        - requestTimestamp
        - status
      properties:
        requesterUid:
          readOnly: true
          type: string
          format: uuid
        requesteeUid:
          type: string
          format: uuid
        matchNum:
          readOnly: true
          type: integer
          minimum: 0
        requestTimestamp:
          readOnly: true
          type: string
          format: date-time
        acceptTimestamp:
          readOnly: true
          type: string
          format: date-time
        endTimestamp:
          readOnly: true
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/SwapStatus"
    Errors:
      type: array
      items:
        $ref: "#/components/schemas/Error"
    Error:
      type: object
      required:
        - path
        - message
        - detail
      properties:
        path:
          type: string
        message:
          type: string
        detail:
          type: string
    Session:
      type: object
      required:
        - cookie
        - accountUid
      properties:
        cookie:
          $ref: "#/components/schemas/Cookie"
        accountUid:
          type: string
          format: uuid
  responses:
    BadRequest:
      description: request format is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Unauthorized:
      description: action requires authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Forbidden:
      description: insufficient permission for this action
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    NotFound:
      description: specified resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    Conflict:
      description: request has correct format but data currently conflicts
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
    InternalServerError:
      description: error processing request on server
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
  parameters:
    AccountUid:
      name: accountUid
      description: The uuid of an account
      in: path
      required: true
      schema:
        type: string
        format: uuid
